"let g:pathogen_disabled = ['00-nerdtree', '02-vim-devicons', 'ctrlp.vim',
"            \ 'gundo.vim', 'nerdcommenter', 'python-syntax', 'vim-airline',
"            \ 'vim-gitgutter', 'vim-nerdtree-syntax-highlight', 'vim-sensible',
"            \ 'vim-visual-multi', '01-nerdtree-git-plugin', 'AutoClose',
"            \ 'git-blame.vim', 'indentLine', 'papercolor-theme', 'syntastic',
"            \ 'vim-fish', 'vim-monokai-tasty', 'vim-python-pep8-indent',
"            \ 'vim-surround', 'YouCompleteMe']

" Plugin related

execute pathogen#infect()

filetype plugin on
set encoding=utf-8

"Autoclose-related bugfix
if &term[:4] == "xterm" || &term[:5] == 'screen' || &term[:3] == 'rxvt'
  inoremap <silent> <C-[>OC <RIGHT>
endif


" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_rst_checkers = ['Sphinx']
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_error_symbol = ''
let g:syntastic_style_error_symbol = ''
let g:syntastic_warning_symbol = '∆'
let g:syntastic_style_warning_symbol = '≈'
let g:syntastic_enable_signs = 1
let g:syntastic_enable_highlighting = 1
highlight SyntasticErrorLine ctermbg=124
highlight SyntasticWarningLine ctermbg=124

map <C-l> <ESC>:call SyntasticToggle()<CR>
let g:syntastic_is_open = 0  
function! SyntasticToggle()
    if g:syntastic_is_open == 1
        lclose
        let g:syntastic_is_open = 0 
    else
        Errors
        let g:syntastic_is_open = 1 
    endif
endfunction

" python-syntax
let python_version_3 = 1
let python_highlight_all = 1

" indentLine
let g:indentLine_conceallevel = 2
let g:indentLine_concealcursor = "inc"
let g:indentLine_char = '┊'
let g:indentLine_setConceal = 2

" ctrlp
let g:ctrlp_custom_ignore = '\v[\/](__pycache__|node_modules|target)|^(dist|build)|(\.(swp|ico|git|svn))$'
let g:ctrlp_show_hidden = 1
nnoremap <C-P> :CtrlPCurWD<CR>

"nerdtree
map <C-s> :NERDTreeToggle <bar> NERDTreeMirror<CR>
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif | AirlineRefresh
autocmd BufEnter NERD_tree* :let indentLine_enabled = 0 | AirlineRefresh
let NERDTreeShowHidden = 1
let NERDTreeMouseMode = 2
let NERDTreeDirArrowExpandable = ''
let NERDTreeDirArrowCollapsible = ''

" nerdtree git plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ 'Modified'  : '~',
    \ 'Staged'    : '+',
    \ 'Untracked' : '➜',
    \ 'Renamed'   : '',
    \ 'Unmerged'  : '═',
    \ 'Deleted'   : '✖',
    \ 'Dirty'     : '',
    \ 'Clean'     : '',
    \ 'Ignored'   : '☒',
    \ 'Unknown'   : '?'
    \ }

" vim-devicons
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" vim-nerdtree-syntax-highlight

let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'

let g:WebDevIconsDefaultFolderSymbolColor = s:beige
let g:WebDevIconsDefaultFileSymbolColor = s:blue

let g:NERDTreeSyntaxDisableDefaultExtensions = 1
let g:NERDTreeSyntaxDisableDefaultExactMatches = 1
let g:NERDTreeSyntaxDisableDefaultPatternMatches = 1
let g:NERDTreeSyntaxEnabledExtensions = ['c', 'h', 'c++', 'cpp', 'py', 'rb', 'js', 'css', 'html']
let g:NERDTreeSyntaxEnabledExactMatches = ['node_modules', 'favicon.ico']

" nerdcommenter
let NERDDefaultAlign='left'

"gundo
let g:gundo_prefer_python3 = 1
nnoremap <F5> :GundoToggle<CR>

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 1

" vim-python-pep8-indent
let g:python_pep8_indent_hang_closing = 1

" ycm
let g:ycm_auto_hover = ''

nmap <leader>D <plug>(YCMHover)
augroup MyYCMCustom
  autocmd!
  autocmd FileType py let b:ycm_hover = {
    \ 'command': 'GetDoc',
    \ 'syntax': &filetype
    \ }
augroup END

"custom insert keymappings
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Up>"

"gitgutter keymappings
map ghn :GitGutterNextHunk<CR>
map ghN :GitGutterPrevHunk<CR>
map ghs :GitGutterStageHunk<CR>
map ghu :GitGutterUndoHunk<CR>
map ghp :GitGutterPreviewHunk<CR>

"gitblame mappings
nnoremap gb :<C-u>call gitblame#echo()<CR>

function DarkTheme()
    "colorscheme sublimemonokai
    colorscheme vim-monokai-tasty
endfunction

function LightTheme()
    colorscheme shirotelin
endfunction

call DarkTheme()
set colorcolumn=80

set matchpairs=(:),{:},[:],<:>
set number
set foldcolumn=3
set updatetime=100
set foldmethod=indent
set cursorline
set statusline=_%f
set title
set mouse=a
set ttymouse=sgr
set modifiable
set undoreload=0
set belloff=all

set directory^=$HOME/.vim/tmp//

set clipboard=unnamed


autocmd BufWrite AirlineRefresh

" vim hardcodes background color erase even if the terminfo file does
" not contain bce (not to mention that libvte based terminals
" incorrectly contain bce in their terminfo files). This causes
" incorrect background rendering when using a color theme with a
" background color.
let &t_ut=''
